id: 140_connection_refused_context
name: Context-dependent Connection refused errors requiring exclusion search
description: |
  A service has 300+ "Connection refused" errors with three different root causes:
  1. Config reload with wrong settings
  2. After deployment when service not ready
  3. During high load when connection pool exhausted

  Simply searching "Connection refused" returns all 300+ instances. To find the root
  cause, Holmes needs to either:
  - Search for what happened BEFORE the first occurrence (exclude Connection refused)
  - Search for the first instance and look at context before it

user_request: "The api-service has hundreds of Connection refused errors. What's causing them?"

tags:
  - logs
  - context
  - filtering
  - root_cause

before_test:
  - kubectl create namespace app-140 || true
  - kubectl apply -f ./deployment.yaml -n app-140
  - kubectl wait --for=condition=ready pod -l app=api-service -n app-140 --timeout=60s || true

after_test:
  - kubectl delete namespace app-140 --force --grace-period=0 || true

expected_answer:
  must_contain:
    - "config"
    - "database_host: db-staging"
    - "production environment"
  should_contain:
    - "wrong configuration"
    - "staging database"
    - "PROD_CONFIG=false"
  must_not_contain:
    - "deployment issue"
    - "high load"
    - "connection pool"
  reasoning: |
    Holmes should identify that the first Connection refused errors started after a
    config reload that loaded staging database settings in production. This requires
    looking at logs BEFORE the errors started, not just at the errors themselves.
