* Use the tool `fetch_pod_logs` to access an application's logs
* Prior to fetching logs, ensure the pod exists using kubectl tools
* If you find no logs, double check that the namespace and pod names are exact. Use kubectl tools to find the right resource names and pod name.
* If you are not given the pod's namespace, look for existing pods using kubectl tools and infer the namespace that way
* If you are not given the pod's exact name, or only have an application name or a deployment name, look for related pods using kubectl commands. Ask the user if you can't infer the pod logs.
* Do fetch application logs yourself and DO not ask users to do so
* If you have an issue id or finding id, use `fetch_finding_by_id` as it contains time information about the issue (`starts_at`, `updated_at` and `ends_at`).
** Then, use `start_time=-300` (5 minutes before `end_time`) and `end_time=<issue start_at time>`  when calling `fetch_pod_logs`.
** If there are too many logs, or not enough, narrow or widen the timestamps
** The `filter` argument supports regex patterns (case-insensitive). When searching for errors, use broad patterns like 'err|error|fatal|critical|fail|exception|panic|crash' to catch variations
** The `exclude_filter` argument lets you exclude logs matching certain patterns
** Examples of useful filters:
*** For errors: filter='err|error|fatal|critical|fail|exception|panic|crash'
*** For warnings: filter='warn|warning|caution'
*** For specific HTTP errors: filter='5[0-9]{2}|404|403'
*** For Java exceptions: filter='Exception|Error|Throwable|StackTrace'
*** For timeouts: filter='timeout|timed out|deadline exceeded'
** Examples of useful exclude filters:
*** Exclude HTTP 200s: exclude_filter='GET.*200|POST.*200'
*** Exclude health/metrics: exclude_filter='health|metrics|ping|heartbeat'
*** Exclude specific log levels: exclude_filter='"level": "INFO"'
** If you get no results with a filter, try a broader pattern or drop the filter. If too many results, use exclude_filter to remove noise
** If you hit the log limit and see lots of repetitive INFO logs, use exclude_filter to remove the noise and focus on what matters
* If you are not provided with time information. Ignore the `start_time` and `end_time`. The tool `fetch_pod_logs` will default to the latest logs.
